@import './functions';

@mixin font(
  $font-weight: $base-font-weight,
  $font-family: $primary-font-family
) {
  font-family: $font-family;
  font-weight: $font-weight;
}

@mixin letter-spacing($ps-value, $font-size) {
  letter-spacing: (($ps-value * $font-size) / 1000) + px;
}

@mixin clearfix {
  &::before,
  &::after {
    content: '';
    display: table;
  }
  &::after {
    clear: both;
  }
}

@mixin font-size($font-size, $line-height: null, $letter-spacing: null) {
  font-size: $font-size + px;

  @if $line-height {
    line-height: $line-height + px;
  }

  @if $letter-spacing {
    letter-spacing: $letter-spacing + px;
  }
}

// =============================================================================
// REM Unit Converter
// =============================================================================
@mixin rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $font-size: $base-font-size;
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and unit($value) == px {
      // px value given - calculate rem value from font-size
      $new-rem-value: $value / $font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if type-of($value) == number and not unitless($value) and unit($value) == '%' {
      // % value given - don't add px or rem
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

// =============================================================================
// Font Face
// =============================================================================
@mixin font-face($name, $path, $weight: null, $style: null) {
  @font-face {
    font-family: quote($name);
    src: url(#{$path}.woff) format('woff');
    font-weight: $weight;
    font-style: $style;
  }
}

// =============================================================================
// Make Button
// =============================================================================
// build a button based on a theme from
// $button-themes map
// @param $name - button name
// @param $theme [primary] - the theme to use from the map
@mixin make-button($name, $theme: 'primary') {
  $values: map-get($button-themes, $theme);

  @content;

  @if $theme != 'inline' {
    background-color: map-get($values, bgColor);
    color: map-get($values, color);
    font-size: map-get($values, fontSize);
    line-height: map-get($values, lineHeight);
    text-decoration: map-get($values, textDecoration);
    display: inline-block;
    padding: 15px 20px 12px;
    letter-spacing: 1.5px;
    min-width: 231px;
    text-align: center;
    text-transform: uppercase;
    @extend %MyriadBold;
  } @else {
    color: map-get($values, color);
    text-decoration: underline;
  }
}

// =============================================================================
// Aspect Ratio
// =============================================================================
@mixin aspect-ratio($width, $height) {
  position: relative;
  &::before {
    display: block;
    content: ' ';
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > * {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

// =============================================================================
// Media Query
// =============================================================================
// Supports
// @include mq($max, breakpoint) {}
// @include mq('', min-breakpoint, max-breakpoint) {}
// @include mq($min, breakpoint) {}
@mixin mq($constraint, $viewport1, $viewport2: null) {
  $min: 'min-width';
  $max: 'max-width';
  $vp1: $viewport1 / 16;
  @if $constraint == $min {
    @media screen and ($min: #{$vp1}em) {
      @content;
    }
  } @else if $constraint == $max {
    @media screen and ($max: #{$vp1}em) {
      @content;
    }
  } @else if $viewport2 != null {
    $vp2: $viewport2 / 16;
    @media screen and ($min: #{$vp1}em) and ($max: #{$vp2}em) {
      @content;
    }
  }
}
